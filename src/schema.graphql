type Query {
	info: String!
	staticText: String
	feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
}

type Feed {
	count: Int
	links: [Link!]!
}

type Link {
	id: ID!
	description: String!
	url: String
	postedBy: User
	votes: [Vote!]!
}

type User {
	id: ID!
	name: String!
	email: String!
	links: [Link!]!
	votes: [Vote!]!
}

type AuthPayload {
	token: String
	user: User
}

type Mutation {
	post(url: String, description: String!): Link!
	update(id: ID!, url: String, description: String): Link!
	deletePost(id: ID!): Link
	signup(name: String!, email: String!, password: String!): AuthPayload
	login(email: String!, password: String!): AuthPayload
	upvote(linkId: ID!): Vote!
}

type Subscription {
	newLink: Link
	newVote: Vote
}

type Vote {
	id: ID!
	link: Link!
	user: User!
}

enum LinkOrderByInput {
	description_ASC
	description_DESC
	url_ASC
	url_DESC
	createdAt_ASC
	createdAt_DESC
}
